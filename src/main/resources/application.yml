# === INPUT ===

# offered items
spring.cloud.stream.bindings.offered-item:
  destination: offered-items-topic
  consumer:
    useNativeDecoding: true
    headerMode: raw
spring.cloud.stream.kafka.streams.bindings.offered-item:
  consumer:
    keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
    valueSerde: org.apache.kafka.common.serialization.Serdes$StringSerde

# offers
spring.cloud.stream.bindings.offer:
  destination: offers-topic
  consumer:
    useNativeDecoding: true
    headerMode: raw
spring.cloud.stream.kafka.streams.bindings.offer:
  consumer:
    keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
    valueSerde: org.apache.kafka.common.serialization.Serdes$StringSerde

# items
spring.cloud.stream.bindings.item:
  destination: items-topic
  consumer:
    useNativeDecoding: true
    headerMode: raw
spring.cloud.stream.kafka.streams.bindings.item:
  consumer:
    keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
    valueSerde: org.apache.kafka.common.serialization.Serdes$StringSerde

# === OUTPUT ===

# item-with-offers-out
spring.cloud.stream.bindings.item-with-offers:
  destination: item-with-offers-topic
  producer:
    useNativeEncoding: true
    headerMode: raw
spring.cloud.stream.kafka.streams.bindings.item-with-offers:
  producer:
    keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
    valueSerde: org.apache.kafka.common.serialization.Serdes$StringSerde

spring.cloud.stream.kafka.streams.binder:
  brokers: localhost #192.168.99.100
  zkNodes: localhost #192.168.99.100
  configuration:
    default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
    default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
    commit.interval.ms: 1000
    application.id: default
#spring.cloud.stream.kafka.binder.autoConfigureTopics: false
#spring.data.mongodb.uri: mongodb://my_user:password123@localhost/testdb